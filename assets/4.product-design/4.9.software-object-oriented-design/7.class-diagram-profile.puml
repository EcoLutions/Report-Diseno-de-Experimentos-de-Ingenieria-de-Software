@startuml Profile: Domain Layer Class Diagram

title Profile: Domain Layer Class Diagram

skinparam class {
    BackgroundColor<<Aggregate Root>> #FFFFFF/B3E5FC
    BackgroundColor<<Entity>> #FFFFFF/C8E6C9
    BackgroundColor<<Value Object>> #FFFFFF/FFF9C4
    BackgroundColor<<Domain Service>> #FFFFFF/FFCCBC
    BackgroundColor<<Application Service>> #FFFFFF/E8EAF6
    BackgroundColor<<Repository>> #FFFFFF/F3E5F5
    BackgroundColor<<Controller>> #FFFFFF/E0F2F1
    BackgroundColor<<Factory>> #FFFFFF/E1BEE7
    BackgroundColor<<Strategy>> #FFFFFF/E8F5E8
    BackgroundColor<<Enum>> #FFFFFF/FFF3E0
    BorderColor #212121
    ArrowColor #212121
    FontSize 14
}

package "Profile Context" {

    package "Interfaces Layer" {
        ' ===================== CONTROLLERS =====================
        class "ProfileController" <<(C, #00695C) Controller>> {
            - profileService : ProfileApplicationService
            + createProfile(request : CreateProfileRequest) : ResponseEntity<ProfileResponse>
            + updateProfile(profileId : Long, request : UpdateProfileRequest) : ResponseEntity<Void>
            + getProfile(profileId : Long) : ResponseEntity<ProfileResponse>
            + getProfileByUserId(userId : String) : ResponseEntity<ProfileResponse>
            + getProfilesByUserType(userType : String, municipalityId : Long) : ResponseEntity<List<ProfileResponse>>
            + deactivateProfile(profileId : Long, request : DeactivateProfileRequest) : ResponseEntity<Void>
            + updateContactInfo(profileId : Long, request : UpdateContactRequest) : ResponseEntity<Void>
            + updateAddress(profileId : Long, request : UpdateAddressRequest) : ResponseEntity<Void>
            + verifyContactMethod(profileId : Long, methodId : Long, request : VerifyContactRequest) : ResponseEntity<Void>
        }

        class "PreferencesController" <<(C, #00695C) Controller>> {
            - preferencesService : PreferencesApplicationService
            + createPreferences(request : CreatePreferencesRequest) : ResponseEntity<PreferencesResponse>
            + updatePreferences(preferencesId : Long, request : UpdatePreferencesRequest) : ResponseEntity<Void>
            + getPreferences(profileId : Long) : ResponseEntity<PreferencesResponse>
            + updateNotificationSettings(preferencesId : Long, request : UpdateNotificationSettingsRequest) : ResponseEntity<Void>
            + addCommunicationChannel(preferencesId : Long, request : AddChannelRequest) : ResponseEntity<Void>
            + updateLanguagePreference(preferencesId : Long, request : UpdateLanguageRequest) : ResponseEntity<Void>
            + updateTimezone(preferencesId : Long, request : UpdateTimezoneRequest) : ResponseEntity<Void>
            + updateMarketingConsent(preferencesId : Long, request : UpdateConsentRequest) : ResponseEntity<Void>
        }

        class "PersonalizationController" <<(C, #00695C) Controller>> {
            - personalizationService : PersonalizationApplicationService
            + createPersonalization(request : CreatePersonalizationRequest) : ResponseEntity<PersonalizationResponse>
            + updateDashboardLayout(settingsId : Long, request : UpdateLayoutRequest) : ResponseEntity<Void>
            + getPersonalization(profileId : Long) : ResponseEntity<PersonalizationResponse>
            + addWidget(settingsId : Long, request : AddWidgetRequest) : ResponseEntity<WidgetResponse>
            + removeWidget(settingsId : Long, widgetId : Long) : ResponseEntity<Void>
            + updateWidget(settingsId : Long, widgetId : Long, request : UpdateWidgetRequest) : ResponseEntity<Void>
            + createShortcut(settingsId : Long, request : CreateShortcutRequest) : ResponseEntity<ShortcutResponse>
            + resetToDefaults(settingsId : Long) : ResponseEntity<Void>
            + exportConfiguration(settingsId : Long) : ResponseEntity<PersonalizationExportResponse>
        }
    }

    package "Application Layer" {
        ' ===================== APPLICATION SERVICES =====================
        class "ProfileApplicationService" <<(S, #5E35B1) Application Service>> {
            - profileRepository : ProfileRepository
            - profileDomainService : ProfileDomainService
            - profileFactory : ProfileFactory
            - eligibilityService : ProfileEligibilityService
            - eventPublisher : DomainEventPublisher

            + createProfile(userId : UserId, userType : UserType, personalInfo : PersonalInfo, contactInfo : ContactInfo, addressInfo : AddressInfo) : UserProfile
            + updateProfile(profileId : ProfileId, personalInfo : PersonalInfo, contactInfo : ContactInfo, addressInfo : AddressInfo) : void
            + updateContactInfo(profileId : ProfileId, contactInfo : ContactInfo) : void
            + updateAddress(profileId : ProfileId, addressInfo : AddressInfo) : void
            + deactivateProfile(profileId : ProfileId, reason : DeactivationReason) : void
            + verifyContactMethod(profileId : ProfileId, methodId : ContactMethodId, verificationCode : String) : VerificationResult
            + getProfileById(profileId : ProfileId) : Optional<UserProfile>
            + getProfileByUserId(userId : UserId) : Optional<UserProfile>
            + getProfilesByUserType(userType : UserType, municipalityId : MunicipalityId) : List<UserProfile>
        }

        class "PreferencesApplicationService" <<(S, #5E35B1) Application Service>> {
            - preferencesRepository : PreferencesRepository
            - preferencesDomainService : PreferencesDomainService
            - preferencesFactory : PreferencesFactory
            - eventPublisher : DomainEventPublisher

            + createPreferences(profileId : ProfileId, defaultSettings : DefaultPreferences) : UserPreferences
            + updatePreferences(preferencesId : PreferencesId, notificationSettings : NotificationSettings, communicationChannels : List<CommunicationChannel>, language : Language, timezone : Timezone) : void
            + updateNotificationSettings(preferencesId : PreferencesId, settings : NotificationSettings) : void
            + addCommunicationChannel(preferencesId : PreferencesId, channel : CommunicationChannel) : void
            + removeCommunicationChannel(preferencesId : PreferencesId, channel : CommunicationChannel) : void
            + updateLanguage(preferencesId : PreferencesId, language : Language) : void
            + updateMarketingConsent(preferencesId : PreferencesId, consent : MarketingConsent) : void
            + getPreferencesByProfile(profileId : ProfileId) : Optional<UserPreferences>
        }

        class "PersonalizationApplicationService" <<(S, #5E35B1) Application Service>> {
            - personalizationRepository : PersonalizationRepository
            - personalizationDomainService : PersonalizationDomainService
            - personalizationFactory : PersonalizationFactory
            - eventPublisher : DomainEventPublisher

            + createPersonalization(profileId : ProfileId, userType : UserType) : PersonalizationSettings
            + updateDashboardLayout(settingsId : PersonalizationSettingsId, layout : DashboardLayout) : void
            + addWidget(settingsId : PersonalizationSettingsId, widget : WidgetConfiguration) : void
            + removeWidget(settingsId : PersonalizationSettingsId, widgetId : WidgetId) : void
            + updateWidget(settingsId : PersonalizationSettingsId, widgetId : WidgetId, configuration : WidgetConfig) : void
            + createShortcut(settingsId : PersonalizationSettingsId, shortcut : Shortcut) : void
            + resetToDefaults(settingsId : PersonalizationSettingsId, userType : UserType) : void
            + getPersonalizationByProfile(profileId : ProfileId) : Optional<PersonalizationSettings>
            + exportConfiguration(settingsId : PersonalizationSettingsId) : PersonalizationExport
        }
    }

    package "Domain Layer" {
        ' ===================== AGGREGATES =====================
        class "UserProfile" <<(A, #27D3F5) Aggregate Root>> {
            - id : Long
            - profileId : ProfileId
            - userId : UserId
            - userType : UserType
            - personalInfo : PersonalInfo
            - contactInfo : ContactInfo
            - addressInfo : AddressInfo
            - serviceArea : ServiceArea
            - status : ProfileStatus
            - privacySettings : PrivacySettings
            - accountSettings : AccountSettings
            - profileCompleteness : ProfileCompleteness
            - lastLoginDate : LocalDateTime
            - createdAt : LocalDateTime
            - version : Long

            # UserProfile()
            + UserProfile(userId : UserId, userType : UserType, personalInfo : PersonalInfo)
            + updatePersonalInfo(personalInfo : PersonalInfo) : void
            + updateContactInfo(contactInfo : ContactInfo) : void
            + updateAddress(addressInfo : AddressInfo) : void
            + validateServiceAreaEligibility(location : Location) : EligibilityResult
            + updatePrivacySettings(settings : PrivacySettings) : void
            + deactivate(reason : DeactivationReason) : void
            + isComplete() : boolean
            + canAccessService(serviceType : ServiceType) : boolean
            + calculateProfileScore() : ProfileScore
            + recordLogin() : void
            + isActive() : boolean
            + canBeModified() : boolean
            + canBeDeactivated() : boolean
            + getAvailableActions() : List<ProfileAction>
            + publishDomainEvents() : List<DomainEvent>
        }

        class "UserPreferences" <<(A, #27D3F5) Aggregate Root>> {
            - id : Long
            - preferencesId : PreferencesId
            - profileId : ProfileId
            - notificationSettings : NotificationSettings
            - communicationChannels : List<CommunicationChannel>
            - languagePreference : Language
            - timezonePreference : Timezone
            - themePreference : ThemePreference
            - accessibilitySettings : AccessibilitySettings
            - dataRetentionSettings : DataRetentionSettings
            - marketingConsent : MarketingConsent
            - version : Long

            # UserPreferences()
            + UserPreferences(profileId : ProfileId, defaultSettings : DefaultPreferences)
            + updateNotificationSettings(settings : NotificationSettings) : void
            + addCommunicationChannel(channel : CommunicationChannel) : void
            + removeCommunicationChannel(channel : CommunicationChannel) : void
            + updateLanguage(language : Language) : void
            + updateTheme(theme : ThemePreference) : void
            + updateAccessibilitySettings(settings : AccessibilitySettings) : void
            + grantMarketingConsent() : void
            + revokeMarketingConsent() : void
            + isChannelEnabled(channel : CommunicationChannel) : boolean
            + getEffectiveTimezone() : Timezone
            + canBeModified() : boolean
            + getAvailableActions() : List<PreferencesAction>
            + publishDomainEvents() : List<DomainEvent>
        }

        class "PersonalizationSettings" <<(A, #27D3F5) Aggregate Root>> {
            - id : Long
            - settingsId : PersonalizationSettingsId
            - profileId : ProfileId
            - dashboardLayout : DashboardLayout
            - widgetConfigurations : List<WidgetConfiguration>
            - shortcuts : List<Shortcut>
            - customFields : List<CustomField>
            - viewPreferences : ViewPreferences
            - reportingPreferences : ReportingPreferences
            - version : Long

            # PersonalizationSettings()
            + PersonalizationSettings(profileId : ProfileId, userType : UserType)
            + updateDashboardLayout(layout : DashboardLayout) : void
            + addWidget(widget : WidgetConfiguration) : void
            + removeWidget(widgetId : WidgetId) : void
            + createShortcut(shortcut : Shortcut) : void
            + addCustomField(field : CustomField) : void
            + updateViewPreferences(preferences : ViewPreferences) : void
            + resetToDefaults(userType : UserType) : void
            + exportConfiguration() : PersonalizationExport
            + canBeModified() : boolean
            + canBeReset() : boolean
            + getAvailableActions() : List<PersonalizationAction>
            + publishDomainEvents() : List<DomainEvent>
        }

        ' ===================== ENTITIES =====================
        class "ContactMethod" <<(E, #4CAF50) Entity>> {
            - id : Long
            - methodId : ContactMethodId
            - type : ContactMethodType
            - value : String
            - isPrimary : boolean
            - isVerified : boolean
            - verificationDate : LocalDateTime
            - lastUsedDate : LocalDateTime

            + ContactMethod(type : ContactMethodType, value : String)
            + verify(verificationCode : String) : VerificationResult
            + markAsUsed() : void
            + isActive() : boolean
            + canBeVerified() : boolean
        }

        class "AddressHistory" <<(E, #4CAF50) Entity>> {
            - id : Long
            - historyId : AddressHistoryId
            - profileId : ProfileId
            - address : AddressInfo
            - validFrom : LocalDateTime
            - validTo : LocalDateTime
            - changeReason : AddressChangeReason

            + AddressHistory(profileId : ProfileId, address : AddressInfo)
            + isCurrentAddress() : boolean
            + overlaps(other : AddressHistory) : boolean
            + endPeriod() : void
        }

        class "WidgetConfiguration" <<(E, #4CAF50) Entity>> {
            - id : Long
            - widgetId : WidgetId
            - widgetType : WidgetType
            - position : WidgetPosition
            - size : WidgetSize
            - configuration : WidgetConfig
            - isVisible : boolean
            - refreshInterval : Duration

            + WidgetConfiguration(widgetType : WidgetType, position : WidgetPosition)
            + updatePosition(position : WidgetPosition) : void
            + resize(size : WidgetSize) : void
            + hide() : void
            + show() : void
            + updateConfiguration(config : WidgetConfig) : void
        }

        ' ===================== ENUMS =====================
        enum "ProfileStatus" <<(E, #FFF3E0) Enum>> {
            ACTIVE
            INACTIVE
            SUSPENDED
            DEACTIVATED
            PENDING_VERIFICATION

            + canTransitionTo(newStatus : ProfileStatus) : boolean
            + isActive() : boolean
            + canBeModified() : boolean
            + canBeDeactivated() : boolean
            + getAvailableTransitions() : List<ProfileStatus>
        }

        enum "ProfileAction" <<(E, #FFF3E0) Enum>> {
            UPDATE_PERSONAL_INFO
            UPDATE_CONTACT_INFO
            UPDATE_ADDRESS
            DEACTIVATE
            VERIFY_CONTACT
            UPDATE_PRIVACY

            + isAllowedForStatus(status : ProfileStatus) : boolean
            + requiresVerification() : boolean
        }

        enum "PreferencesAction" <<(E, #FFF3E0) Enum>> {
            UPDATE_NOTIFICATIONS
            ADD_CHANNEL
            REMOVE_CHANNEL
            UPDATE_LANGUAGE
            UPDATE_TIMEZONE
            UPDATE_CONSENT

            + isAllowedForProfile(profile : UserProfile) : boolean
            + requiresConfirmation() : boolean
        }

        enum "PersonalizationAction" <<(E, #FFF3E0) Enum>> {
            UPDATE_LAYOUT
            ADD_WIDGET
            REMOVE_WIDGET
            CREATE_SHORTCUT
            RESET_TO_DEFAULTS
            EXPORT_CONFIG

            + isAllowedForUserType(userType : UserType) : boolean
            + requiresPermission() : boolean
        }

        ' ===================== VALUE OBJECTS =====================
        class "ProfileId" <<(V, #FFD700) Value Object>> {
            - profileId : String
            + ProfileId(profileId : String)
            + getValue() : String
            + isValid() : boolean
        }

        class "PreferencesId" <<(V, #FFD700) Value Object>> {
            - preferencesId : String
        }

        class "PersonalizationSettingsId" <<(V, #FFD700) Value Object>> {
            - settingsId : String
        }

        class "ContactMethodId" <<(V, #FFD700) Value Object>> {
            - methodId : String
        }

        class "PersonalInfo" <<(V, #FFD700) Value Object>> {
            - firstName : String
            - lastName : String
            - documentType : DocumentType
            - documentNumber : String
            - dateOfBirth : LocalDate
            - gender : Gender
            + PersonalInfo(firstName : String, lastName : String, documentType : DocumentType, documentNumber : String)
            + getFullName() : String
            + getAge() : Integer
            + isMinor() : boolean
            + isValidDocumentNumber() : boolean
        }

        class "ContactInfo" <<(V, #FFD700) Value Object>> {
            - primaryEmail : EmailAddress
            - secondaryEmail : EmailAddress
            - primaryPhone : PhoneNumber
            - secondaryPhone : PhoneNumber
            - emergencyContact : EmergencyContact
            + ContactInfo(primaryEmail : EmailAddress, primaryPhone : PhoneNumber)
            + hasSecondaryContacts() : boolean
            + getPreferredContactMethod() : ContactMethodType
            + isValidContactInfo() : boolean
        }

        class "AddressInfo" <<(V, #FFD700) Value Object>> {
            - street : String
            - number : String
            - district : String
            - city : String
            - region : String
            - postalCode : String
            - coordinates : GeoCoordinates
            + AddressInfo(street : String, number : String, district : String, city : String)
            + getFullAddress() : String
            + isInServiceArea(serviceArea : ServiceArea) : boolean
            + isValidAddress() : boolean
        }

        class "NotificationSettings" <<(V, #FFD700) Value Object>> {
            - emailEnabled : boolean
            - smsEnabled : boolean
            - pushEnabled : boolean
            - inAppEnabled : boolean
            - quietHours : QuietHours
            - frequency : NotificationFrequency
            + NotificationSettings(emailEnabled : boolean, smsEnabled : boolean, pushEnabled : boolean)
            + isChannelEnabled(channel : CommunicationChannel) : boolean
            + isInQuietHours(timestamp : LocalDateTime) : boolean
            + merge(other : NotificationSettings) : NotificationSettings
        }

        class "PrivacySettings" <<(V, #FFD700) Value Object>> {
            - profileVisibility : ProfileVisibility
            - dataSharing : DataSharingLevel
            - analyticsTracking : boolean
            - marketingCommunications : boolean
            - thirdPartySharing : boolean
            + PrivacySettings(profileVisibility : ProfileVisibility, dataSharing : DataSharingLevel)
            + allowsDataSharing() : boolean
            + allowsAnalytics() : boolean
            + isCompliantWithRegulations() : boolean
        }

        class "ProfileCompleteness" <<(V, #FFD700) Value Object>> {
            - completionPercentage : Double
            - missingFields : List<String>
            - lastCalculated : LocalDateTime
            + ProfileCompleteness(completionPercentage : Double, missingFields : List<String>)
            + isComplete() : boolean
            + getNextRequiredField() : String
            + calculateScore() : Double
        }

        class "WidgetId" <<(V, #FFD700) Value Object>> {
            - widgetId : String
        }

        ' ===================== FACTORIES =====================
        class "ProfileFactory" <<(F, #BA68C8) Factory>> {
            + createCitizenProfile(userId : UserId, personalInfo : PersonalInfo, contactInfo : ContactInfo) : UserProfile
            + createAdministratorProfile(userId : UserId, personalInfo : PersonalInfo, municipality : MunicipalityId) : UserProfile
            + createDriverProfile(userId : UserId, personalInfo : PersonalInfo, licenseInfo : LicenseInfo) : UserProfile
            + createProfile(userId : UserId, userType : UserType, personalInfo : PersonalInfo, contactInfo : ContactInfo) : UserProfile
        }

        class "PreferencesFactory" <<(F, #BA68C8) Factory>> {
            + createDefaultPreferences(profileId : ProfileId, userType : UserType) : UserPreferences
            + createCustomPreferences(profileId : ProfileId, settings : PreferenceSettings) : UserPreferences
            + createPreferences(profileId : ProfileId, defaultSettings : DefaultPreferences) : UserPreferences
        }

        class "PersonalizationFactory" <<(F, #BA68C8) Factory>> {
            + createDefaultPersonalization(profileId : ProfileId, userType : UserType) : PersonalizationSettings
            + createCustomPersonalization(profileId : ProfileId, layout : DashboardLayout) : PersonalizationSettings
            + createPersonalization(profileId : ProfileId, userType : UserType) : PersonalizationSettings
        }

        ' ===================== STRATEGIES =====================
        interface "ProfileValidationStrategy" <<(S, #81C784) Strategy>> {
            + validateProfile(profile : UserProfile) : ValidationResult
            + validatePersonalInfo(personalInfo : PersonalInfo) : ValidationResult
            + validateServiceAreaEligibility(address : AddressInfo, userType : UserType) : EligibilityResult
        }

        class "CitizenValidationStrategy" <<(S, #81C784) Strategy>> {
            + validateProfile(profile : UserProfile) : ValidationResult
            + validatePersonalInfo(personalInfo : PersonalInfo) : ValidationResult
            + validateServiceAreaEligibility(address : AddressInfo, userType : UserType) : EligibilityResult
        }

        class "AdministratorValidationStrategy" <<(S, #81C784) Strategy>> {
            + validateProfile(profile : UserProfile) : ValidationResult
            + validatePersonalInfo(personalInfo : PersonalInfo) : ValidationResult
            + validateServiceAreaEligibility(address : AddressInfo, userType : UserType) : EligibilityResult
        }

        class "DriverValidationStrategy" <<(S, #81C784) Strategy>> {
            + validateProfile(profile : UserProfile) : ValidationResult
            + validatePersonalInfo(personalInfo : PersonalInfo) : ValidationResult
            + validateServiceAreaEligibility(address : AddressInfo, userType : UserType) : EligibilityResult
        }

        ' ===================== DOMAIN SERVICES =====================
        class "ProfileDomainService" <<(S, #FF8A65) Domain Service>> {
            - validationStrategy : ProfileValidationStrategy
            + validateProfileCreation(profile : UserProfile) : ValidationResult
            + validateProfileUpdate(profile : UserProfile, changes : ProfileChanges) : ValidationResult
            + calculateProfileCompleteness(profile : UserProfile) : ProfileCompleteness
            + checkDuplicateProfile(personalInfo : PersonalInfo, documentNumber : String) : ValidationResult
            + setValidationStrategy(strategy : ProfileValidationStrategy) : void
        }

        class "PreferencesDomainService" <<(S, #FF8A65) Domain Service>> {
            + validatePreferencesSettings(preferences : UserPreferences) : ValidationResult
            + mergePreferencesSettings(existing : UserPreferences, updates : UserPreferences) : UserPreferences
            + determineDefaultPreferences(userType : UserType) : DefaultPreferences
            + checkConsentCompliance(preferences : UserPreferences) : ComplianceResult
            + optimizeNotificationSettings(preferences : UserPreferences, usage : UsagePattern) : NotificationSettings
        }

        class "PersonalizationDomainService" <<(S, #FF8A65) Domain Service>> {
            + validatePersonalizationSettings(settings : PersonalizationSettings) : ValidationResult
            + generateDefaultLayout(userType : UserType) : DashboardLayout
            + optimizeWidgetConfiguration(widgets : List<WidgetConfiguration>, usage : UsageData) : List<WidgetConfiguration>
            + validateWidgetCompatibility(widget : WidgetConfiguration, userType : UserType) : ValidationResult
            + exportPersonalizationData(settings : PersonalizationSettings) : PersonalizationExport
        }

        class "ProfileEligibilityService" <<(S, #FF8A65) Domain Service>> {
            + validateServiceAreaEligibility(profile : UserProfile, serviceArea : ServiceArea) : EligibilityResult
            + checkAccessPermissions(profile : UserProfile, serviceType : ServiceType) : AccessResult
            + calculateEligibilityScore(profile : UserProfile) : EligibilityScore
            + determineServiceRestrictions(profile : UserProfile) : List<ServiceRestriction>
            + validateUserTypeRequirements(userType : UserType, profile : UserProfile) : ValidationResult
        }

        ' ===================== REPOSITORY INTERFACES =====================
        interface "ProfileRepository" <<(R, #7B1FA2) Repository>> {
            + findById(profileId : ProfileId) : Optional<UserProfile>
            + findByUserId(userId : UserId) : Optional<UserProfile>
            + findByUserType(userType : UserType) : List<UserProfile>
            + findByServiceArea(serviceArea : ServiceArea) : List<UserProfile>
            + findByStatus(status : ProfileStatus) : List<UserProfile>
            + findByDocumentNumber(documentNumber : String) : Optional<UserProfile>
            + save(profile : UserProfile) : UserProfile
            + delete(profileId : ProfileId) : void
            + existsById(profileId : ProfileId) : boolean
        }

        interface "PreferencesRepository" <<(R, #7B1FA2) Repository>> {
            + findById(preferencesId : PreferencesId) : Optional<UserPreferences>
            + findByProfileId(profileId : ProfileId) : Optional<UserPreferences>
            + findByLanguage(language : Language) : List<UserPreferences>
            + findByTimezone(timezone : Timezone) : List<UserPreferences>
            + findWithMarketingConsent(consent : Boolean) : List<UserPreferences>
            + save(preferences : UserPreferences) : UserPreferences
            + delete(preferencesId : PreferencesId) : void
            + existsById(preferencesId : PreferencesId) : boolean
        }

        interface "PersonalizationRepository" <<(R, #7B1FA2) Repository>> {
            + findById(settingsId : PersonalizationSettingsId) : Optional<PersonalizationSettings>
            + findByProfileId(profileId : ProfileId) : Optional<PersonalizationSettings>
            + findByUserType(userType : UserType) : List<PersonalizationSettings>
            + save(settings : PersonalizationSettings) : PersonalizationSettings
            + delete(settingsId : PersonalizationSettingsId) : void
            + existsById(settingsId : PersonalizationSettingsId) : boolean
        }
    }

    package "Infrastructure Layer" {
        ' ===================== REPOSITORY IMPLEMENTATIONS =====================
        class "JpaProfileRepository" <<(R, #7B1FA2) Repository>> {
            - jpaRepository : ProfileJpaRepository
            - profileMapper : ProfileMapper
            - contactMethodMapper : ContactMethodMapper
            + findById(profileId : ProfileId) : Optional<UserProfile>
            + findByUserId(userId : UserId) : Optional<UserProfile>
            + findByUserType(userType : UserType) : List<UserProfile>
            + findByServiceArea(serviceArea : ServiceArea) : List<UserProfile>
            + findByStatus(status : ProfileStatus) : List<UserProfile>
            + findByDocumentNumber(documentNumber : String) : Optional<UserProfile>
            + save(profile : UserProfile) : UserProfile
            + delete(profileId : ProfileId) : void
            + existsById(profileId : ProfileId) : boolean
        }

        class "JpaPreferencesRepository" <<(R, #7B1FA2) Repository>> {
            - jpaRepository : PreferencesJpaRepository
            - preferencesMapper : PreferencesMapper
            + findById(preferencesId : PreferencesId) : Optional<UserPreferences>
            + findByProfileId(profileId : ProfileId) : Optional<UserPreferences>
            + findByLanguage(language : Language) : List<UserPreferences>
            + findByTimezone(timezone : Timezone) : List<UserPreferences>
            + findWithMarketingConsent(consent : Boolean) : List<UserPreferences>
            + save(preferences : UserPreferences) : UserPreferences
            + delete(preferencesId : PreferencesId) : void
            + existsById(preferencesId : PreferencesId) : boolean
        }

        class "JpaPersonalizationRepository" <<(R, #7B1FA2) Repository>> {
            - jpaRepository : PersonalizationJpaRepository
            - personalizationMapper : PersonalizationMapper
            - widgetMapper : WidgetConfigurationMapper
            + findById(settingsId : PersonalizationSettingsId) : Optional<PersonalizationSettings>
            + findByProfileId(profileId : ProfileId) : Optional<PersonalizationSettings>
            + findByUserType(userType : UserType) : List<PersonalizationSettings>
            + save(settings : PersonalizationSettings) : PersonalizationSettings
            + delete(settingsId : PersonalizationSettingsId) : void
            + existsById(settingsId : PersonalizationSettingsId) : boolean
        }
    }
}

package "Shared Kernel" {
    package "Domain Layer" {
        class "UserId" <<(V, #FFD700) Value Object>> {
            - userId : String
        }

        class "MunicipalityId" <<(V, #FFD700) Value Object>> {
            - municipalityId : String
        }

        class "Language" <<(V, #FFD700) Value Object>> {
            - languageCode : String
            - displayName : String
        }

        class "Timezone" <<(V, #FFD700) Value Object>> {
            - timezoneId : String
        }

        class "ServiceArea" <<(V, #FFD700) Value Object>> {
            - areaId : String
            - boundaries : GeoPolygon
        }

        class "ValidationResult" <<(V, #FFD700) Value Object>> {
            - isValid : Boolean
            - errors : List<String>
            - warnings : List<String>
            + hasErrors() : Boolean
            + hasWarnings() : Boolean
        }

        interface "DomainEvent" <<(E, #FFB74D) Domain Event>> {
            + getAggregateId() : String
            + getOccurredOn() : LocalDateTime
            + getEventType() : String
        }

        interface "DomainEventPublisher" <<(P, #FF8A65) Publisher>> {
            + publish(event : DomainEvent) : void
            + publishAll(events : List<DomainEvent>) : void
        }
    }
}

' ===================== RELATIONSHIPS =====================

' --- Controller Dependencies ---
ProfileController --> ProfileApplicationService : uses >
PreferencesController --> PreferencesApplicationService : uses >
PersonalizationController --> PersonalizationApplicationService : uses >

' --- Application Service Dependencies ---
ProfileApplicationService --> ProfileRepository : uses >
ProfileApplicationService --> ProfileDomainService : uses >
ProfileApplicationService --> ProfileFactory : uses >
ProfileApplicationService --> ProfileEligibilityService : uses >
ProfileApplicationService --> DomainEventPublisher : uses >

PreferencesApplicationService --> PreferencesRepository : uses >
PreferencesApplicationService --> PreferencesDomainService : uses >
PreferencesApplicationService --> PreferencesFactory : uses >
PreferencesApplicationService --> DomainEventPublisher : uses >

PersonalizationApplicationService --> PersonalizationRepository : uses >
PersonalizationApplicationService --> PersonalizationDomainService : uses >
PersonalizationApplicationService --> PersonalizationFactory : uses >
PersonalizationApplicationService --> DomainEventPublisher : uses >

' --- Repository Implementations ---
ProfileRepository <|.. JpaProfileRepository : implements >
PreferencesRepository <|.. JpaPreferencesRepository : implements >
PersonalizationRepository <|.. JpaPersonalizationRepository : implements >

' --- Aggregate Root Compositions ---
UserProfile *-- ProfileId
UserProfile *-- PersonalInfo
UserProfile *-- ContactInfo
UserProfile *-- AddressInfo
UserProfile *-- PrivacySettings
UserProfile *-- ProfileCompleteness
UserProfile *-- ProfileStatus
UserProfile o-- ContactMethod
UserProfile o-- AddressHistory

UserPreferences *-- PreferencesId
UserPreferences *-- NotificationSettings

PersonalizationSettings *-- PersonalizationSettingsId
PersonalizationSettings o-- WidgetConfiguration

' --- Entity Compositions ---
ContactMethod *-- ContactMethodId
WidgetConfiguration *-- WidgetId

' --- Shared Kernel Usage ---
UserProfile ..> UserId : uses >
UserProfile ..> ServiceArea : uses >
UserProfile ..> ValidationResult : validates with >
UserProfile ..> DomainEvent : publishes >
UserPreferences ..> Language : uses >
UserPreferences ..> Timezone : uses >
UserPreferences ..> DomainEvent : publishes >
PersonalizationSettings ..> DomainEvent : publishes >

' --- Factory Relationships ---
ProfileFactory ..> UserProfile : creates >
PreferencesFactory ..> UserPreferences : creates >
PersonalizationFactory ..> PersonalizationSettings : creates >

' --- Strategy Relationships ---
ProfileValidationStrategy <|.. CitizenValidationStrategy : implements >
ProfileValidationStrategy <|.. AdministratorValidationStrategy : implements >
ProfileValidationStrategy <|.. DriverValidationStrategy : implements >
ProfileDomainService o-- ProfileValidationStrategy : uses >

' --- Domain Service Relationships ---
ProfileDomainService ..> UserProfile : operates on >
ProfileDomainService ..> ValidationResult : returns >
PreferencesDomainService ..> UserPreferences : operates on >
PersonalizationDomainService ..> PersonalizationSettings : operates on >
ProfileEligibilityService ..> UserProfile : validates >

' --- Repository Relationships ---
ProfileRepository ..> UserProfile : manages >
PreferencesRepository ..> UserPreferences : manages >
PersonalizationRepository ..> PersonalizationSettings : manages >

@enduml